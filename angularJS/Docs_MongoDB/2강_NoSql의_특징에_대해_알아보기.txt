NoSql 특징
  * 기존 컴퓨팅 시스템 특징
    1. 기업의 복잡한 데이터를 저장하고 그 데이터 간의 관계를 정의하고 분석하는데 최적화
    2. 생성되는 데이터양은 한계를 가지고 있음
    
  * NoSql 등장 배경
    1. 2000년대 들어서면서 인터넷의 발전과 함계 SNS 서비스가 활성화, 전세계 사용대 대상의 서비스로 발전
    2. 기존의 기업 시스템에서 볼 수 없었던 대규모 데이터를 생산
    3. 이러한 데이터들은 기존 기업 데이터에 비해 매우 단순한 형태를 가짐
    4. 데이터의 패러다임이 한정된 규모의 복잡성이 높은 데이터에서 단순한 대량의 데이터로 넘어가기 시작
    5. 기존의 데이터 저장 시스템으로는 커버할 수 없는 여러가지 한계를 야기했고 결국에는 새로운 형태의 데이터 저장 기술을 요구
    
    - 단순한 대용량 데이터 처리에 대한 요구가 가장 많은 구글과 아마존에 의해 빅테이블(Bingtable)과 Dynomo라는 논문이 발표
    - 기존의 RDBMS 중심의 데이터 저장 기술 시장에 새로운 데이터 저장 기술인 NoSql이 등장하는 계기가 됨
    - NoSql은 Not Only SQL의 약자로 기존 RDBMS 형태의 관계형 데이터베이스가 아닌 다른 형태의 데이터 저장 기술을 의미 함
    
  * NoSql의 특징
    - RDBMS와 다른 형태의 데이터 저장 구조를 총칭하며 제품에 따라 특성이 매우 달라서 NoSql을 하나의 제품군으로 정의할 수는 없다
    - RDBMS는 데이터의 관계를 Foreign Key 등으로 정의하고 이를 이용에 Join등의 관계형 연산을 하지만, NoSql은 데이터 간의 관계를 정의하지 않음
    - RDBMS의 복잡도와 용량 한계를 극복하기 위한 목적으로 등장한 만큼, 페타바이트급의 대용량 데이터를 저장할 수 있음
    - 수십 대의 서버를 연결해 데이터를 저장 및 처리하는 구조이며,데이터를 여러 대의 서버에 분산해 저장하고, 분산 시에 데이터를
      상호 복제해 특정 서버에 장애가 발생했을 때에도 데이터 유실이나 서비스 중지가 없음
    - NoSql은 RDBMS와 다르게 테이블의 스키마가 유동적임
    - ID 필드는 공통이지만, 데이터를 저장하는 컬럼은 각기 다른 이름과 다른 데이터 타입을 가질 수 있음
    
  * NoSql 종류
    a. Key/Value Store
      - 대부분의 NoSql은 Key/Value 개념을 지원
      - Unique Key 하나에 Value를 가지고 있는 형태
      - 대표 제품 : Redis
    b. Ordered Key/Value Store
      - 데이터가 내부적으로 Key를 순서로 Sorting되어 저장됨
      - Key 안에(column:value) 조합으로 된 여러개의 필드를 가지는 구조
      - 대표 제품 : Hbase, Cassandra
    c. Document Key/Value Store
      - Key/Value Store의 확장된 형태
      - 저장되는 Value의 데이터 타입으로 "Document"라는 구조화된 데이터 타입(JSON, XML, YAML등)을 사용
      - 복잡한 계층구조 표현 가능
      - 제품에 따라 추가 기능(Sorting, Join, grouping) 지원
      - 대표 제품 : MongoDB
      
  * NoSql 모델링 특징
    - 관계형 데이터베이스 모델링 보다 더 깊은 데이터 구조 및 접근 알고리즘에 대한 이해가 필요함
    - NoSql 쿼리가 실제 몇개의 물리 노드에 걸쳐서 수행되는지에 대한 이해가 있어야 제대로된 쿼리 디자인이 가능
    - NoSql 디자인은 dB와 어플리케이션 뿐만 아니라 인프라(네트워크, 디스크)에 대한 디자인을 함께 해야 함
    - 대부분의 NoSql DB는 인증이나 인가 체계가 없어서 보안에 매우 취약하기 때문에 별도의 보안 체계가 필요(방화벽이나 Reverse Proxy 등)
    
  * RDBMS 장정
    - 범용적이며 고성능, 이미 성숙한 기술, 안정적
    - 데이터의 일관성을 보증(트랜잭션)
    - 정규화를 전제로 하고 있기 때문에 업데이트 시 비용이 적음(동일 컬럼은 동일 장소에 존재)
    - 복잡한 형태의 쿼리도 가능(Join 등)
  * RDMBS 단점
    - 대량의 데이터 입력 처리
    - 테이블의 인덱스 생성이나 스키마 변경 시
    - 개발/운영 시 컬럼을 확정 지식 어려운 경우 
  
  * NoSql 장점
    - 특정 용도로 특화되어 있음, 각 NoSql의 솔루션의 특징을 알 필요가 있음
    - 데이터 분산에 용이
    - 기본적으로 NoSql의 Join 연산은 대부분 불가능
    - 데이터 모델 자체가 독립적으로 설계되어 있어 데이터를 여러서버에 분산시키는 것이 용이함
    - 데이터에 대한 캐시가 필요한 경우, 배열 형식의 데이터를 고속으로 처리할 필요가 있는 경우
    - 모든 데이터를 저장하고 싶은 경우
  * NoSql 단점
    - 각 솔루션의 특징을 이해할 필요가 있음
    - 아직 새로운 기술로 운영 노하우가 적음
    - 버그가 상대적으로 많이 있는 상태
    - 업체마다 고유의 특색을 살린 NoSql을 개발해 공개하는 경우가 많아 새로운 솔루션이 계속 출시되는 상태
    